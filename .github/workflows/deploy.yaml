name: "🚀 Production Deploy"

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  python-lint:
    name: "🐍 Ruff Lint"
    runs-on: ubuntu-latest
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "⚙️  Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "📦 Install Ruff"
        run: pip install --upgrade ruff

      - name: "🧹 Ruff check /bot"
        run: ruff check bot/

  python-test:
    name: "🧪 Python Tests"
    runs-on: ubuntu-latest
    needs: python-lint
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "⚙️ Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "📦 Install dependencies"
        working-directory: bot
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov coverage

      - name: "🧪 Run tests"
        working-directory: bot
        run: pytest .

  create-tag:
    name: "🏷️ Create Git Tag"
    runs-on: ubuntu-latest
    needs: python-test
    outputs:
      version: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch full history so we can tag

      - name: "📜 Read version"
        id: vars
        run: echo "VERSION=$(cat VERSION.txt)" >> $GITHUB_OUTPUT

      - name: "🏷️ Create and push tag"
        env:
          VERSION: ${{ steps.vars.outputs.VERSION }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release $VERSION"
          git push origin "v$VERSION"

  build-push:
    name: "🐳 Build & Push Image"
    runs-on: ubuntu-latest
    needs: python-test
    env:
      YCR_REGISTRY: ${{ secrets.YCR_REGISTRY }}   # Registry ID without cr.yandex/ prefix
      YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }} # Service-account key JSON
    outputs:
      version: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: "📥 Checkout code"
        uses: actions/checkout@v4

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "📜 Read version"
        id: vars
        run: echo "VERSION=$(cat VERSION.txt)" >> $GITHUB_OUTPUT

      - name: "🔑 Login to YCR with service account"
        run: echo "$YC_SA_KEY_JSON" | docker login --username json_key --password-stdin cr.yandex

      - name: "🐳 Build & tag image"
        run: |
          docker build \
            -f bot/Dockerfile \
            -t cr.yandex/$YCR_REGISTRY/agromant:${{ steps.vars.outputs.VERSION }} \
            -t cr.yandex/$YCR_REGISTRY/agromant:latest \
            bot

      - name: "🚀 Push image"
        run: |
          docker push cr.yandex/$YCR_REGISTRY/agromant:${{ steps.vars.outputs.VERSION }}
          docker push cr.yandex/$YCR_REGISTRY/agromant:latest