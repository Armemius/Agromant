name: "üöÄ Production Deploy"

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  python-lint:
    name: "üêç Ruff Lint"
    runs-on: ubuntu-latest
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4

      - name: "‚öôÔ∏è  Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "üì¶ Install Ruff"
        run: pip install --upgrade ruff

      - name: "üßπ Ruff check /bot"
        run: ruff check bot/

  python-test:
    name: "üß™ Python Tests"
    runs-on: ubuntu-latest
    needs: python-lint
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4

      - name: "‚öôÔ∏è Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "üì¶ Install dependencies"
        working-directory: bot
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov coverage

      - name: "üß™ Run tests"
        working-directory: bot
        run: pytest .

  create-tag:
    name: "üè∑Ô∏è Create Git Tag"
    runs-on: ubuntu-latest
    needs: python-test
    outputs:
      version: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch full history so we can tag

      - name: "üìú Read version"
        id: vars
        run: echo "VERSION=$(cat VERSION.txt)" >> $GITHUB_OUTPUT

      - name: "üè∑Ô∏è Create and push tag"
        env:
          VERSION: ${{ steps.vars.outputs.VERSION }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release $VERSION"
          git push origin "v$VERSION"

  build-release:
    name: "üì¶ Build Artifact & Create Release"
    runs-on: ubuntu-latest
    needs: create-tag
    outputs:
      version: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "üìú Read version"
        id: vars
        run: echo "VERSION=$(cat VERSION.txt)" >> $GITHUB_OUTPUT

      - name: "‚öôÔ∏è Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: "üì¶ Install build tools"
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: "üèóÔ∏è Build package"
        working-directory: bot
        run: |
          cp ../README.md .
          cp ../VERSION.txt .
          python -m build

      - name: "üöÄ Create GitHub Release & upload artifacts"
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.vars.outputs.VERSION }}
          name: "Release ${{ steps.vars.outputs.VERSION }}"
          files: bot/dist/*
          draft: false
          prerelease: false

  build-push:
    name: "üê≥ Build & Push Image"
    runs-on: ubuntu-latest
    needs: python-test
    env:
      YCR_REGISTRY: ${{ secrets.YCR_REGISTRY }}
      YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
    outputs:
      version: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4

      - name: "üîß Set up Docker Buildx"
        uses: docker/setup-buildx-action@v3

      - name: "üìú Read version"
        id: vars
        run: echo "VERSION=$(cat VERSION.txt)" >> $GITHUB_OUTPUT

      - name: "üîë Login to YCR with service account"
        run: echo "$YC_SA_KEY_JSON" | docker login --username json_key --password-stdin cr.yandex

      - name: "üê≥ Build & tag image"
        run: |
          docker build \
            -f bot/Dockerfile \
            -t cr.yandex/$YCR_REGISTRY/agromant:${{ steps.vars.outputs.VERSION }} \
            -t cr.yandex/$YCR_REGISTRY/agromant:latest \
            bot

      - name: "üöÄ Push image"
        run: |
          docker push cr.yandex/$YCR_REGISTRY/agromant:${{ steps.vars.outputs.VERSION }}
          docker push cr.yandex/$YCR_REGISTRY/agromant:latest

  deploy:
    name: "‚öôÔ∏è Update revision on VM"
    runs-on: ubuntu-latest
    needs: build-push
    env:
      YCR_REGISTRY: ${{ secrets.YCR_REGISTRY }}
      YC_SA_ID: ${{ secrets.YC_SA_ID }}
      YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
      YSC_CONTAINER_ID: ${{ secrets.YSC_CONTAINER_ID }}
      YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      VERSION: ${{ needs.build-push.outputs.version }}
      ENV_FILE_CONTENTS:  ${{ secrets.ENV_VARS }}
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
              echo "Deploying version $VERSION to remote server"
              export VERSION=$VERSION
              docker compose up -d