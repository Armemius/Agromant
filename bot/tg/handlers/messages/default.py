from loguru import logger
from telegram import Update
from telegram.constants import ParseMode, ChatAction
from telegram.ext import ContextTypes

from services import plant_scan_service, user_service
from tg.decorators.message_handler import message_handler
from tg.utils.plant_analyzer import process_plant_analysis
from tg.utils.telegram_media_downloader import get_message_images


@message_handler
async def default_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Default message handler for unhandled commands or messages."""

    if not update.message or not update.message.photo:
        await update.message.reply_text("""
üå± –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ—è—Ç, –∏ —è –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —Å –Ω–∏–º–∏ –Ω–µ —Ç–∞–∫
        """)
        return

    images = await get_message_images(update, context)

    if not images:
        return

    quota_check = await user_service.check_quota(
        tg_id=update.effective_user.id,
        images_count=len(images)
    )

    if not quota_check:
        await update.message.reply_text(
            """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ç–µ–Ω–∏–π ü•∫
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É
            """,
            parse_mode=ParseMode.MARKDOWN,
        )
        return

    message = await update.message.reply_text("üå± –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    try:
        input_tokens, output_tokens, text = await process_plant_analysis(images)
        await plant_scan_service.create_scan(
            user_id=update.effective_user.id,
            images_count=len(images),
            input_tokens=input_tokens,
            output_tokens=output_tokens,
        )
    except RuntimeError:
        logger.exception("Failed to process plant analysis")
        await update.message.reply_text(
            """
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ—â—ë —Ä–∞–∑ üòî
            """
        )
        return

    await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
    )

    await user_service.consume_request(
        tg_id=update.effective_user.id,
        images_count=len(images)
    )

    await message.delete()
